import numpy as np

def hamming_g_to_h(g_matrix):
    """
    Получение контрольной матрицы H для кода Хэмминга из генераторной матрицы G.
    :param g_matrix: Генераторная матрица G (k x n)
    :return: Контрольная матрица H (r x n)
    """
    # Преобразуем G в numpy массив для удобства работы
    g = np.array(g_matrix)
    
    # Число информационных бит (k) и закодированных бит (n)
    k, n = g.shape
    
    # Количество проверочных бит r
    r = n - k
    
    # Извлекаем матрицу P из G
    p = g[:, k:]  # Матрица P имеет размер k x r
    
    # Создаем контрольную матрицу H, объединяя транспонированную P и единичную матрицу
    h = np.zeros((r, n), dtype=int)
    h[:, :k] = p.T % 2  # Транспонируем P
    h[:, k:] = np.eye(r, dtype=int)  # Добавляем единичную матрицу размером r x r

    return h.tolist()

def hamming_h_to_g(h_matrix):
    """
    Получение генераторной матрицы G для кода Хэмминга из контрольной матрицы H.
    :param h_matrix: Контрольная матрица H (r x n)
    :return: Генераторная матрица G (k x n)
    """
    # Преобразуем H в numpy массив для удобства работы
    h = np.array(h_matrix)
    
    # Число проверочных бит (r) и закодированных бит (n)
    r, n = h.shape
    
    # Количество информационных бит k
    k = n - r
    
    # Извлекаем транспонированную матрицу P из H
    p_t = h[:, :k]  # Матрица P^T имеет размер r x k
    
    # Создаем генераторную матрицу G, объединяя единичную матрицу и матрицу P
    g = np.zeros((k, n), dtype=int)
    g[:, :k] = np.eye(k, dtype=int)  # Единичная матрица размером k x k
    g[:, k:] = p_t.T % 2  # Транспонируем P^T обратно в P

    return g.tolist()

# Пример генераторной матрицы для кода Хэмминга (n=7, k=4)
g_matrix = [
    [1, 0, 0, 0, 1, 1, 0],
    [0, 1, 0, 0, 1, 0, 1],
    [0, 0, 1, 0, 1, 1, 1],
    [0, 0, 0, 1, 0, 1, 1],
]

# Получаем контрольную матрицу H из G
h_matrix_from_g = hamming_g_to_h(g_matrix)
print("Контрольная матрица H из G:")
print(np.array(h_matrix_from_g))

# Получаем генераторную матрицу G из H
g_matrix_from_h = hamming_h_to_g(h_matrix_from_g)
print("Генераторная матрица G из H:")
print(np.array(g_matrix_from_h))